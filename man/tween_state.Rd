% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/tween_state.R
\name{tween_state}
\alias{tween_state}
\alias{keep_state}
\title{Compose tweening between states}
\usage{
tween_state(.data, to, ease, nframes, id = NULL, enter = NULL,
  exit = NULL)

keep_state(.data, nframes)
}
\arguments{
\item{.data}{A data.frame to start from. If \code{.data} is the result of a prior
tween, only the last frame will be used for the tween. The new tween will
then be added to the prior tween}

\item{to}{A data.frame to end at. It must contain the same columns as .data
(exluding \code{.frame})}

\item{ease}{The easing function to use. Either a single string or one for
each column in the data set.}

\item{nframes}{The number of frames to calculate for the tween}

\item{id}{The column to match observations on. If \code{NULL} observations will be
matched by position}

\item{enter, exit}{functions that calculate a start state for new observations
that appear in \code{to} or an end state for observations that are not present in
\code{to}. If \code{NULL} the new/old observations will not be part of the tween. The
function gets a data.frame with either the start state of the exiting
observations, or the end state of the entering observations and must return
a modified version of that data.frame.}
}
\value{
A data.frame containing all the intermediary states in the tween,
each state will be enumerated by the \code{.frame} column
}
\description{
The \code{tween_state()} is a counterpart to \code{tween_states()} that is aimed at
letting you gradually build up a scene by composing state changes one by one.
This setup lets you take more control over each state change and allows you
to work with datasets with uneven number of rows, flexibly specifying what
should happen with entering and exiting data. \code{keep_state()} is a simpel
helper for letting you pause at a state.
}
\examples{
data1 <- data.frame(
  x = 1:20,
  y = 0,
  colour = 'forestgreen',
  stringsAsFactors = FALSE
)
data2 <- data1
data2$x <- 20:1
data2$y <- 1

data <- data1 \%>\%
  tween_state(data2, 'linear', 50) \%>\%
  keep_state(20) \%>\%
  tween_state(data1, 'bounce-out', 50)

}
